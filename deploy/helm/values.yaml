# Image pull policy. Possible values: Always, Never, IfNotPresent.
pullPolicy: Always
# Image pull secret name.
pullSecret: ""

# Repository information.
repo:
  # Repository name.
  name: ""
  # Repository branch on which the chart was built.
  branch: ""
  # Repository maintainer.
  maintainer: "WMS"
  # Last commit hash on which the chart was built.
  lastCommitHash: ""

# Alerts configuration.
alerts:
  # Slack channel for alerts.
  slackChannel: "stream-wms"

# Server configuration.
server:
  # Docker image of the server application.
  image: "gcr.io/kazanexpress-184010/server:latest"

  # The minimum number of replicas.
  replicas: 1

  # The resources allocated for each replica, both requests and limits.
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 600m
      memory: 1Gi

  postgres:
    database: integration-metaship
    serviceName: wms-integration-metaship
    port: 6432
    prepareThreshold: 0
    user: ""
    password: ""
    host: ""

  config:
    debug: true
    logger:
      level: info
    # xmx must be lower than memory limit
    javaOpts: -Xmx866m

    env:
      configMap: {}
      secret: {}

  # API configuration.
  api:
    # Port configuration.
    port:
      # Port inside the container.
      internal: 8080
      # External service port.
      external: 80

  # Service configuration. Use for cluster migration.
  service:
    # Is service enabled?
    enabled: true
    nameOverride: wms-integration-metaship

  pods:
    labels:
      keep-logs: enabled
      group: wms

  # Monitoring configuration.
  monitoring:
    # Is monitoring enabled?
    enabled: true
    # Name of the service port this endpoint refers to.
    port: "http"
    # Metric scrape interval.
    interval: 30s
    # Scrape request path.
    path: /metaship/actuator/prometheus
    # Scrape request timeout.
    scrapeTimeout: 5s
    # HonorLabels chooses the metricâ€™s labels on collisions with target labels.
    honorLabels: true
    # Additional monitoring labels.
    additionalLabels:
      prometheus: daily-prometheus
      # prometheus: default

  # Probes configuration.
  probes:
    readiness:
      httpGet:
        path: /metaship/actuator/health
        port: 8080
      periodSeconds: 5
      successThreshold: 3
      failureThreshold: 2
      initialDelaySeconds: 15
    liveness:
      httpGet:
        port: 8080
        path: /metaship/actuator/health/diskSpace
      #        path: /actuator/health
      initialDelaySeconds: 180
      timeoutSeconds: 1

  # Tracing configuration.
  tracing:
    # Jaeger configuration.
    jaeger:
      # Inject Jaeger Agent sidecar?
      injectAgent: false

  # Ingress configuration.
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.allow-http: "false"
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    className: nginx
    tls:
      - hosts:
          - api.wms.kznexpress.ru
        secretName: wms-api-prod-ssl
    rules:
      - host: api.wms.kznexpress.ru
        paths:
          - path: /api/example
            pathType: ImplementationSpecific
            port: 8080

  # NodeSelector configuration of the validators.
  nodeSelector:
    app_type: apps
    # Tolerations of the validators pods.
  tolerations:
    - key: app_type
      operator: Equal
      value: apps
      effect: NoSchedule

  # Deployment affinity configuration. If not set the default one will be used.
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - wms-integration-metaship
            topologyKey: kubernetes.io/hostname


  # Annotations used in the server resources.
  annotations: { }

# Annotations used in all application resources.
annotations: { }
